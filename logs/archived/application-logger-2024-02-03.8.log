2024-02-03 22:25:20,543 [main] INFO  o.s.b.t.a.o.j.DataJpaTestContextBootstrapper - Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@55d99dc3, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@521a506c, org.springframework.test.context.event.ApplicationEventsTestExecutionListener@3c64339f, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@579f3c8e, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@4eb1943b, org.springframework.test.context.support.DirtiesContextTestExecutionListener@4e2824b1, org.springframework.test.context.transaction.TransactionalTestExecutionListener@534d0e20, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@7d18338b, org.springframework.test.context.event.EventPublishingTestExecutionListener@3f4a605f, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@30c8c6ab, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@bcfe29c, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@37f71c05, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@5bd3ca3c, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener@2dd8a273, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@59f76e56]
2024-02-03 22:25:20,584 [main] INFO  l.j.t.i.c.r.AgeCoefficientRepositoryTest - Starting AgeCoefficientRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 5668 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:25:20,584 [main] INFO  l.j.t.i.c.r.AgeCoefficientRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:25:20,639 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:25:20,654 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 4 JPA repository interfaces.
2024-02-03 22:25:20,658 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:25:20,684 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:d8d99613-e255-474c-9931-f446df717c6e;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:25:20,698 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_10000", "Limit is 10000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_15000", "Limit is 15000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_20000", "Limit is 20000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_50000", "Limit is 50000"); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Столбец "LEVEL_10000" не найден
Column "LEVEL_10000" not found; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_10000", "Limit is 10000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_15000", "Limit is 15000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_20000", "Limit is 20000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_50000", "Limit is 50000") [42122-200]
2024-02-03 22:25:20,699 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:25:20,701 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_10000", "Limit is 10000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_15000", "Limit is 15000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_20000", "Limit is 20000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_50000", "Limit is 50000"); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Столбец "LEVEL_10000" не найден
Column "LEVEL_10000" not found; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_10000", "Limit is 10000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_15000", "Limit is 15000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_20000", "Limit is 20000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_50000", "Limit is 50000") [42122-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_10000", "Limit is 10000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_15000", "Limit is 15000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_20000", "Limit is 20000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_50000", "Limit is 50000"); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Столбец "LEVEL_10000" не найден
Column "LEVEL_10000" not found; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_10000", "Limit is 10000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_15000", "Limit is 15000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_20000", "Limit is 20000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_50000", "Limit is 50000") [42122-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Столбец "LEVEL_10000" не найден
Column "LEVEL_10000" not found; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_10000", "Limit is 10000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_15000", "Limit is 15000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_20000", "Limit is 20000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_50000", "Limit is 50000") [42122-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.expression.ExpressionColumn.getColumnException(ExpressionColumn.java:163)
	at org.h2.expression.ExpressionColumn.optimize(ExpressionColumn.java:145)
	at org.h2.command.dml.Insert.prepare(Insert.java:327)
	at org.h2.command.Parser.prepareCommand(Parser.java:744)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:25:20,723 [main] INFO  l.j.t.i.c.r.AgeCoefficientRepositoryTest - Starting AgeCoefficientRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 5668 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:25:20,723 [main] INFO  l.j.t.i.c.r.AgeCoefficientRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:25:20,782 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:25:20,802 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 4 JPA repository interfaces.
2024-02-03 22:25:20,812 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:25:20,843 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:2813055c-e7a8-42d7-9816-aba83c739b65;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:25:20,861 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_10000", "Limit is 10000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_15000", "Limit is 15000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_20000", "Limit is 20000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_50000", "Limit is 50000"); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Столбец "LEVEL_10000" не найден
Column "LEVEL_10000" not found; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_10000", "Limit is 10000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_15000", "Limit is 15000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_20000", "Limit is 20000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_50000", "Limit is 50000") [42122-200]
2024-02-03 22:25:20,861 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:25:20,862 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_10000", "Limit is 10000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_15000", "Limit is 15000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_20000", "Limit is 20000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_50000", "Limit is 50000"); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Столбец "LEVEL_10000" не найден
Column "LEVEL_10000" not found; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_10000", "Limit is 10000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_15000", "Limit is 15000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_20000", "Limit is 20000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_50000", "Limit is 50000") [42122-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.outputConditionEvaluationReport(SpringBootDependencyInjectionTestExecutionListener.java:53)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:46)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_10000", "Limit is 10000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_15000", "Limit is 15000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_20000", "Limit is 20000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_50000", "Limit is 50000"); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Столбец "LEVEL_10000" не найден
Column "LEVEL_10000" not found; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_10000", "Limit is 10000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_15000", "Limit is 15000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_20000", "Limit is 20000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_50000", "Limit is 50000") [42122-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 88 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Столбец "LEVEL_10000" не найден
Column "LEVEL_10000" not found; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_10000", "Limit is 10000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_15000", "Limit is 15000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_20000", "Limit is 20000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_50000", "Limit is 50000") [42122-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.expression.ExpressionColumn.getColumnException(ExpressionColumn.java:163)
	at org.h2.expression.ExpressionColumn.optimize(ExpressionColumn.java:145)
	at org.h2.command.dml.Insert.prepare(Insert.java:327)
	at org.h2.command.Parser.prepareCommand(Parser.java:744)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 98 common frames omitted
2024-02-03 22:25:20,863 [main] ERROR o.s.test.context.TestContextManager - Caught exception while allowing TestExecutionListener [org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@4eb1943b] to prepare test instance [lv.javaguru.travel.insurance.core.repositories.AgeCoefficientRepositoryTest@591e5fd4]
java.lang.IllegalStateException: Failed to load ApplicationContext
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:98)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_10000", "Limit is 10000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_15000", "Limit is 15000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_20000", "Limit is 20000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_50000", "Limit is 50000"); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Столбец "LEVEL_10000" не найден
Column "LEVEL_10000" not found; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_10000", "Limit is 10000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_15000", "Limit is 15000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_20000", "Limit is 20000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_50000", "Limit is 50000") [42122-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	... 72 common frames omitted
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_10000", "Limit is 10000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_15000", "Limit is 15000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_20000", "Limit is 20000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_50000", "Limit is 50000"); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Столбец "LEVEL_10000" не найден
Column "LEVEL_10000" not found; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_10000", "Limit is 10000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_15000", "Limit is 15000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_20000", "Limit is 20000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_50000", "Limit is 50000") [42122-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Столбец "LEVEL_10000" не найден
Column "LEVEL_10000" not found; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_10000", "Limit is 10000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_15000", "Limit is 15000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_20000", "Limit is 20000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_50000", "Limit is 50000") [42122-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.expression.ExpressionColumn.getColumnException(ExpressionColumn.java:163)
	at org.h2.expression.ExpressionColumn.optimize(ExpressionColumn.java:145)
	at org.h2.command.dml.Insert.prepare(Insert.java:327)
	at org.h2.command.Parser.prepareCommand(Parser.java:744)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:25:20,890 [main] INFO  l.j.t.i.c.r.AgeCoefficientRepositoryTest - Starting AgeCoefficientRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 5668 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:25:20,891 [main] INFO  l.j.t.i.c.r.AgeCoefficientRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:25:20,944 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:25:20,959 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14 ms. Found 4 JPA repository interfaces.
2024-02-03 22:25:20,963 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:25:20,983 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:c28c1250-41ec-4655-bd9d-c8eb69019543;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:25:20,999 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_10000", "Limit is 10000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_15000", "Limit is 15000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_20000", "Limit is 20000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_50000", "Limit is 50000"); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Столбец "LEVEL_10000" не найден
Column "LEVEL_10000" not found; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_10000", "Limit is 10000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_15000", "Limit is 15000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_20000", "Limit is 20000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_50000", "Limit is 50000") [42122-200]
2024-02-03 22:25:21,000 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:25:21,002 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_10000", "Limit is 10000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_15000", "Limit is 15000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_20000", "Limit is 20000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_50000", "Limit is 50000"); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Столбец "LEVEL_10000" не найден
Column "LEVEL_10000" not found; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_10000", "Limit is 10000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_15000", "Limit is 15000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_20000", "Limit is 20000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_50000", "Limit is 50000") [42122-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_10000", "Limit is 10000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_15000", "Limit is 15000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_20000", "Limit is 20000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_50000", "Limit is 50000"); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Столбец "LEVEL_10000" не найден
Column "LEVEL_10000" not found; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_10000", "Limit is 10000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_15000", "Limit is 15000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_20000", "Limit is 20000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_50000", "Limit is 50000") [42122-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Столбец "LEVEL_10000" не найден
Column "LEVEL_10000" not found; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_10000", "Limit is 10000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_15000", "Limit is 15000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_20000", "Limit is 20000"), ((SELECT id FROM `classifiers` WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), "LEVEL_50000", "Limit is 50000") [42122-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.expression.ExpressionColumn.getColumnException(ExpressionColumn.java:163)
	at org.h2.expression.ExpressionColumn.optimize(ExpressionColumn.java:145)
	at org.h2.command.dml.Insert.prepare(Insert.java:327)
	at org.h2.command.Parser.prepareCommand(Parser.java:744)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:25:21,032 [main] INFO  l.j.t.i.c.r.AgeCoefficientRepositoryTest - Starting AgeCoefficientRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 5668 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:25:21,032 [main] INFO  l.j.t.i.c.r.AgeCoefficientRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:33,334 [main] INFO  o.s.b.t.a.o.j.DataJpaTestContextBootstrapper - Neither @ContextConfiguration nor @ContextHierarchy found for test class [lv.javaguru.travel.insurance.core.repositories.CountryDefaultDayRateRepositoryTest], using SpringBootContextLoader
2024-02-03 22:26:33,340 [main] INFO  o.s.t.c.s.AbstractContextLoader - Could not detect default resource locations for test class [lv.javaguru.travel.insurance.core.repositories.CountryDefaultDayRateRepositoryTest]: no resource found for suffixes {-context.xml, Context.groovy}.
2024-02-03 22:26:33,341 [main] INFO  o.s.t.c.s.AnnotationConfigContextLoaderUtils - Could not detect default configuration classes for test class [lv.javaguru.travel.insurance.core.repositories.CountryDefaultDayRateRepositoryTest]: CountryDefaultDayRateRepositoryTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2024-02-03 22:26:33,454 [main] INFO  o.s.b.t.c.SpringBootTestContextBootstrapper - Found @SpringBootConfiguration lv.javaguru.travel.insurance.InsuranceApplication for test class lv.javaguru.travel.insurance.core.repositories.CountryDefaultDayRateRepositoryTest
2024-02-03 22:26:33,456 [main] INFO  o.s.b.t.a.o.j.DataJpaTestContextBootstrapper - Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.event.ApplicationEventsTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener, org.springframework.test.context.event.EventPublishingTestExecutionListener]
2024-02-03 22:26:33,470 [main] INFO  o.s.b.t.a.o.j.DataJpaTestContextBootstrapper - Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@59f63e24, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@61f05988, org.springframework.test.context.event.ApplicationEventsTestExecutionListener@7ca33c24, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@fade1fc, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@67c2e933, org.springframework.test.context.support.DirtiesContextTestExecutionListener@41dd05a, org.springframework.test.context.transaction.TransactionalTestExecutionListener@613a8ee1, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@178213b, org.springframework.test.context.event.EventPublishingTestExecutionListener@7103cb56, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@1b765a2c, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@2e8e8225, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@6ebf0f36, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@18920cc, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener@2807bdeb, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@72c28d64]
2024-02-03 22:26:33,733 [main] INFO  l.j.t.i.c.r.CountryDefaultDayRateRepositoryTest - Starting CountryDefaultDayRateRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:33,734 [main] INFO  l.j.t.i.c.r.CountryDefaultDayRateRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:34,032 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:34,098 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 59 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:34,134 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:34,362 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:59bd357e-2beb-4ba2-a090-a5ae6f08abc3;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:34,536 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:34,540 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:34,554 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:34,609 [main] INFO  l.j.t.i.c.r.CountryDefaultDayRateRepositoryTest - Starting CountryDefaultDayRateRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:34,609 [main] INFO  l.j.t.i.c.r.CountryDefaultDayRateRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:34,688 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:34,704 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 16 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:34,711 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:34,736 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:3295a8c4-de1e-4ed4-96ba-6ca88494506a;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:34,755 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:34,755 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:34,757 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.outputConditionEvaluationReport(SpringBootDependencyInjectionTestExecutionListener.java:53)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:46)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 88 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 98 common frames omitted
2024-02-03 22:26:34,758 [main] ERROR o.s.test.context.TestContextManager - Caught exception while allowing TestExecutionListener [org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@67c2e933] to prepare test instance [lv.javaguru.travel.insurance.core.repositories.CountryDefaultDayRateRepositoryTest@5dbb50f3]
java.lang.IllegalStateException: Failed to load ApplicationContext
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:98)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	... 72 common frames omitted
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:34,804 [main] INFO  l.j.t.i.c.r.CountryDefaultDayRateRepositoryTest - Starting CountryDefaultDayRateRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:34,805 [main] INFO  l.j.t.i.c.r.CountryDefaultDayRateRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:34,867 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:34,883 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 16 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:34,889 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:34,910 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:e6ac6a1e-6d47-412c-be5f-05194b1a25bb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:34,933 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:34,935 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:34,937 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:34,956 [main] INFO  l.j.t.i.c.r.CountryDefaultDayRateRepositoryTest - Starting CountryDefaultDayRateRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:34,956 [main] INFO  l.j.t.i.c.r.CountryDefaultDayRateRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:35,013 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:35,029 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:35,037 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:35,059 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:44582200-4379-4645-883c-2e4abcbd4e7e;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:35,075 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:35,076 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:35,077 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.outputConditionEvaluationReport(SpringBootDependencyInjectionTestExecutionListener.java:53)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:46)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 88 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 98 common frames omitted
2024-02-03 22:26:35,078 [main] ERROR o.s.test.context.TestContextManager - Caught exception while allowing TestExecutionListener [org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@67c2e933] to prepare test instance [lv.javaguru.travel.insurance.core.repositories.CountryDefaultDayRateRepositoryTest@4735d6e5]
java.lang.IllegalStateException: Failed to load ApplicationContext
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:98)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	... 72 common frames omitted
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:35,107 [main] INFO  l.j.t.i.c.r.CountryDefaultDayRateRepositoryTest - Starting CountryDefaultDayRateRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:35,107 [main] INFO  l.j.t.i.c.r.CountryDefaultDayRateRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:35,158 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:35,172 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:35,178 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:35,200 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:740d626c-0a0a-42d5-8d02-276f52c4568d;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:35,219 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:35,220 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:35,222 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:35,247 [main] INFO  l.j.t.i.c.r.CountryDefaultDayRateRepositoryTest - Starting CountryDefaultDayRateRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:35,247 [main] INFO  l.j.t.i.c.r.CountryDefaultDayRateRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:35,295 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:35,311 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 16 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:35,316 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:35,336 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:44a5f7f0-1a69-467a-b298-5af834bae7b3;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:35,352 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:35,353 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:35,356 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.outputConditionEvaluationReport(SpringBootDependencyInjectionTestExecutionListener.java:53)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:46)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 88 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 98 common frames omitted
2024-02-03 22:26:35,357 [main] ERROR o.s.test.context.TestContextManager - Caught exception while allowing TestExecutionListener [org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@67c2e933] to prepare test instance [lv.javaguru.travel.insurance.core.repositories.CountryDefaultDayRateRepositoryTest@4db77402]
java.lang.IllegalStateException: Failed to load ApplicationContext
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:98)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	... 72 common frames omitted
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:35,384 [main] INFO  l.j.t.i.c.r.CountryDefaultDayRateRepositoryTest - Starting CountryDefaultDayRateRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:35,384 [main] INFO  l.j.t.i.c.r.CountryDefaultDayRateRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:35,433 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:35,447 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 13 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:35,453 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:35,475 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:65c9b460-18c5-453d-8036-662844acf966;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:35,488 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:35,488 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:35,489 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:35,514 [main] INFO  l.j.t.i.c.r.CountryDefaultDayRateRepositoryTest - Starting CountryDefaultDayRateRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:35,514 [main] INFO  l.j.t.i.c.r.CountryDefaultDayRateRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:35,557 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:35,572 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:35,580 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:35,605 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:d878a7d6-8e4c-4016-80db-69ebb7f46dd4;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:35,624 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:35,624 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:35,626 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.outputConditionEvaluationReport(SpringBootDependencyInjectionTestExecutionListener.java:53)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:46)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 88 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 98 common frames omitted
2024-02-03 22:26:35,627 [main] ERROR o.s.test.context.TestContextManager - Caught exception while allowing TestExecutionListener [org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@67c2e933] to prepare test instance [lv.javaguru.travel.insurance.core.repositories.CountryDefaultDayRateRepositoryTest@118acf70]
java.lang.IllegalStateException: Failed to load ApplicationContext
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:98)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	... 72 common frames omitted
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:35,654 [main] INFO  l.j.t.i.c.r.CountryDefaultDayRateRepositoryTest - Starting CountryDefaultDayRateRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:35,654 [main] INFO  l.j.t.i.c.r.CountryDefaultDayRateRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:35,706 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:35,721 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 13 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:35,725 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:35,745 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:8ab9dc82-69d3-48f4-a13e-df89b03dca54;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:35,761 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:35,762 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:35,763 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:35,778 [main] INFO  l.j.t.i.c.r.CountryDefaultDayRateRepositoryTest - Starting CountryDefaultDayRateRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:35,778 [main] INFO  l.j.t.i.c.r.CountryDefaultDayRateRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:35,826 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:35,839 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 12 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:35,843 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:35,861 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:d82a0bf0-ee61-4f79-baa3-cb8f96db5108;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:35,888 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:35,889 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:35,893 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.outputConditionEvaluationReport(SpringBootDependencyInjectionTestExecutionListener.java:53)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:46)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 88 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 98 common frames omitted
2024-02-03 22:26:35,894 [main] ERROR o.s.test.context.TestContextManager - Caught exception while allowing TestExecutionListener [org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@67c2e933] to prepare test instance [lv.javaguru.travel.insurance.core.repositories.CountryDefaultDayRateRepositoryTest@3bbf1c0d]
java.lang.IllegalStateException: Failed to load ApplicationContext
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:98)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	... 72 common frames omitted
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:36,357 [main] INFO  o.s.b.t.a.o.j.DataJpaTestContextBootstrapper - Neither @ContextConfiguration nor @ContextHierarchy found for test class [lv.javaguru.travel.insurance.core.repositories.AgeCoefficientRepositoryTest], using SpringBootContextLoader
2024-02-03 22:26:36,358 [main] INFO  o.s.t.c.s.AbstractContextLoader - Could not detect default resource locations for test class [lv.javaguru.travel.insurance.core.repositories.AgeCoefficientRepositoryTest]: no resource found for suffixes {-context.xml, Context.groovy}.
2024-02-03 22:26:36,358 [main] INFO  o.s.t.c.s.AnnotationConfigContextLoaderUtils - Could not detect default configuration classes for test class [lv.javaguru.travel.insurance.core.repositories.AgeCoefficientRepositoryTest]: AgeCoefficientRepositoryTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2024-02-03 22:26:36,362 [main] INFO  o.s.b.t.c.SpringBootTestContextBootstrapper - Found @SpringBootConfiguration lv.javaguru.travel.insurance.InsuranceApplication for test class lv.javaguru.travel.insurance.core.repositories.AgeCoefficientRepositoryTest
2024-02-03 22:26:36,362 [main] INFO  o.s.b.t.a.o.j.DataJpaTestContextBootstrapper - Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.event.ApplicationEventsTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener, org.springframework.test.context.event.EventPublishingTestExecutionListener]
2024-02-03 22:26:36,362 [main] INFO  o.s.b.t.a.o.j.DataJpaTestContextBootstrapper - Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@2fa879ed, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@2b2b7e3c, org.springframework.test.context.event.ApplicationEventsTestExecutionListener@3ec082a1, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@7a3c99f1, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@16b7e04a, org.springframework.test.context.support.DirtiesContextTestExecutionListener@661db63e, org.springframework.test.context.transaction.TransactionalTestExecutionListener@5cf2f5d6, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@429f0ca8, org.springframework.test.context.event.EventPublishingTestExecutionListener@6b030101, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@60a4e619, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@2bb3f39e, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@11f3400c, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@628b503a, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener@2558f65c, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@11c3ce6a]
2024-02-03 22:26:36,398 [main] INFO  l.j.t.i.c.r.AgeCoefficientRepositoryTest - Starting AgeCoefficientRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:36,398 [main] INFO  l.j.t.i.c.r.AgeCoefficientRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:36,451 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:36,473 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 20 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:36,478 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:36,501 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:ea76048a-67c9-420f-8d61-59eaf6e34719;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:36,515 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:36,516 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:36,517 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:36,538 [main] INFO  l.j.t.i.c.r.AgeCoefficientRepositoryTest - Starting AgeCoefficientRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:36,538 [main] INFO  l.j.t.i.c.r.AgeCoefficientRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:36,598 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:36,616 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 18 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:36,623 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:36,650 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:8eb7dcbc-6248-468e-8594-431a2b9a88fe;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:36,666 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:36,667 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:36,668 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.outputConditionEvaluationReport(SpringBootDependencyInjectionTestExecutionListener.java:53)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:46)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 88 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 98 common frames omitted
2024-02-03 22:26:36,670 [main] ERROR o.s.test.context.TestContextManager - Caught exception while allowing TestExecutionListener [org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@16b7e04a] to prepare test instance [lv.javaguru.travel.insurance.core.repositories.AgeCoefficientRepositoryTest@4213bc3e]
java.lang.IllegalStateException: Failed to load ApplicationContext
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:98)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	... 72 common frames omitted
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:36,695 [main] INFO  l.j.t.i.c.r.AgeCoefficientRepositoryTest - Starting AgeCoefficientRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:36,695 [main] INFO  l.j.t.i.c.r.AgeCoefficientRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:36,746 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:36,761 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 13 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:36,765 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:36,785 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:fb806d63-cab0-4c08-8943-1d7ceffb8553;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:36,799 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:36,799 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:36,801 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:36,817 [main] INFO  l.j.t.i.c.r.AgeCoefficientRepositoryTest - Starting AgeCoefficientRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:36,817 [main] INFO  l.j.t.i.c.r.AgeCoefficientRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:36,874 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:36,888 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:36,892 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:36,918 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:c21e6586-fb54-4b88-9332-a0597138e8b7;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:36,936 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:36,936 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:36,938 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.outputConditionEvaluationReport(SpringBootDependencyInjectionTestExecutionListener.java:53)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:46)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 88 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 98 common frames omitted
2024-02-03 22:26:36,940 [main] ERROR o.s.test.context.TestContextManager - Caught exception while allowing TestExecutionListener [org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@16b7e04a] to prepare test instance [lv.javaguru.travel.insurance.core.repositories.AgeCoefficientRepositoryTest@644b68ad]
java.lang.IllegalStateException: Failed to load ApplicationContext
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:98)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	... 72 common frames omitted
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:36,959 [main] INFO  l.j.t.i.c.r.AgeCoefficientRepositoryTest - Starting AgeCoefficientRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:36,959 [main] INFO  l.j.t.i.c.r.AgeCoefficientRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:37,008 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:37,021 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 13 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:37,024 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:37,047 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:3739313e-bb87-4135-b5b4-2a8bca6cba65;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:37,064 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:37,064 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:37,065 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:37,082 [main] INFO  l.j.t.i.c.r.AgeCoefficientRepositoryTest - Starting AgeCoefficientRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:37,082 [main] INFO  l.j.t.i.c.r.AgeCoefficientRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:37,135 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:37,149 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 13 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:37,153 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:37,176 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:5f0f185e-937d-4230-9600-bbf0472024b9;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:37,190 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:37,190 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:37,192 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.outputConditionEvaluationReport(SpringBootDependencyInjectionTestExecutionListener.java:53)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:46)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 88 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 98 common frames omitted
2024-02-03 22:26:37,193 [main] ERROR o.s.test.context.TestContextManager - Caught exception while allowing TestExecutionListener [org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@16b7e04a] to prepare test instance [lv.javaguru.travel.insurance.core.repositories.AgeCoefficientRepositoryTest@7c03f9d0]
java.lang.IllegalStateException: Failed to load ApplicationContext
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:98)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	... 72 common frames omitted
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:37,212 [main] INFO  l.j.t.i.c.r.AgeCoefficientRepositoryTest - Starting AgeCoefficientRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:37,213 [main] INFO  l.j.t.i.c.r.AgeCoefficientRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:37,255 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:37,267 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:37,272 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:37,286 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:040b1f3f-1fea-490c-befa-2f2288cc0041;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:37,298 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:37,299 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:37,301 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:37,319 [main] INFO  l.j.t.i.c.r.AgeCoefficientRepositoryTest - Starting AgeCoefficientRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:37,319 [main] INFO  l.j.t.i.c.r.AgeCoefficientRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:37,361 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:37,377 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:37,381 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:37,401 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:ea365339-d8d4-4bcd-8af2-2601587d6852;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:37,412 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:37,413 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:37,415 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.outputConditionEvaluationReport(SpringBootDependencyInjectionTestExecutionListener.java:53)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:46)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 88 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 98 common frames omitted
2024-02-03 22:26:37,416 [main] ERROR o.s.test.context.TestContextManager - Caught exception while allowing TestExecutionListener [org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@16b7e04a] to prepare test instance [lv.javaguru.travel.insurance.core.repositories.AgeCoefficientRepositoryTest@3bb4c2b2]
java.lang.IllegalStateException: Failed to load ApplicationContext
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:98)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	... 72 common frames omitted
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:37,435 [main] INFO  l.j.t.i.c.r.AgeCoefficientRepositoryTest - Starting AgeCoefficientRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:37,435 [main] INFO  l.j.t.i.c.r.AgeCoefficientRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:37,483 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:37,504 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 20 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:37,510 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:37,523 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:a661d955-9190-48f1-8cba-3b63f5831d18;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:37,536 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:37,537 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:37,538 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:37,552 [main] INFO  l.j.t.i.c.r.AgeCoefficientRepositoryTest - Starting AgeCoefficientRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:37,552 [main] INFO  l.j.t.i.c.r.AgeCoefficientRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:37,600 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:37,617 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 17 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:37,623 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:37,639 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:bd24b87f-49fe-4984-a001-a5f95ea690dd;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:37,648 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:37,648 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:37,650 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.outputConditionEvaluationReport(SpringBootDependencyInjectionTestExecutionListener.java:53)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:46)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 88 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 98 common frames omitted
2024-02-03 22:26:37,651 [main] ERROR o.s.test.context.TestContextManager - Caught exception while allowing TestExecutionListener [org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@16b7e04a] to prepare test instance [lv.javaguru.travel.insurance.core.repositories.AgeCoefficientRepositoryTest@247dcbba]
java.lang.IllegalStateException: Failed to load ApplicationContext
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:98)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	... 72 common frames omitted
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:37,876 [main] INFO  o.s.b.t.a.o.j.DataJpaTestContextBootstrapper - Neither @ContextConfiguration nor @ContextHierarchy found for test class [lv.javaguru.travel.insurance.core.repositories.ClassifierRepositoryTest], using SpringBootContextLoader
2024-02-03 22:26:37,876 [main] INFO  o.s.t.c.s.AbstractContextLoader - Could not detect default resource locations for test class [lv.javaguru.travel.insurance.core.repositories.ClassifierRepositoryTest]: no resource found for suffixes {-context.xml, Context.groovy}.
2024-02-03 22:26:37,876 [main] INFO  o.s.t.c.s.AnnotationConfigContextLoaderUtils - Could not detect default configuration classes for test class [lv.javaguru.travel.insurance.core.repositories.ClassifierRepositoryTest]: ClassifierRepositoryTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2024-02-03 22:26:37,879 [main] INFO  o.s.b.t.c.SpringBootTestContextBootstrapper - Found @SpringBootConfiguration lv.javaguru.travel.insurance.InsuranceApplication for test class lv.javaguru.travel.insurance.core.repositories.ClassifierRepositoryTest
2024-02-03 22:26:37,879 [main] INFO  o.s.b.t.a.o.j.DataJpaTestContextBootstrapper - Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.event.ApplicationEventsTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener, org.springframework.test.context.event.EventPublishingTestExecutionListener]
2024-02-03 22:26:37,879 [main] INFO  o.s.b.t.a.o.j.DataJpaTestContextBootstrapper - Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@c6d7256, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@48188d23, org.springframework.test.context.event.ApplicationEventsTestExecutionListener@4860627a, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@67f0bf7e, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@e88e14, org.springframework.test.context.support.DirtiesContextTestExecutionListener@c157abf, org.springframework.test.context.transaction.TransactionalTestExecutionListener@472dbaf5, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@25c4f621, org.springframework.test.context.event.EventPublishingTestExecutionListener@619854a3, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@46ff1aad, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@6c2fea95, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@6ed87ccf, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@4d4600fb, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener@7352418c, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@60ba6631]
2024-02-03 22:26:37,895 [main] INFO  l.j.t.i.c.r.ClassifierRepositoryTest - Starting ClassifierRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:37,895 [main] INFO  l.j.t.i.c.r.ClassifierRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:37,935 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:37,946 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 10 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:37,949 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:37,966 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:d98d7ea0-65df-4990-bf56-8a800f0b3859;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:37,981 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:37,981 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:37,989 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:38,005 [main] INFO  l.j.t.i.c.r.ClassifierRepositoryTest - Starting ClassifierRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:38,005 [main] INFO  l.j.t.i.c.r.ClassifierRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:38,050 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:38,067 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 17 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:38,073 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:38,092 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:dc0c2154-ebc4-4986-8f4d-3c3664b75d9b;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:38,107 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:38,107 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:38,108 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.outputConditionEvaluationReport(SpringBootDependencyInjectionTestExecutionListener.java:53)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:46)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 88 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 98 common frames omitted
2024-02-03 22:26:38,109 [main] ERROR o.s.test.context.TestContextManager - Caught exception while allowing TestExecutionListener [org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@e88e14] to prepare test instance [lv.javaguru.travel.insurance.core.repositories.ClassifierRepositoryTest@5eae392d]
java.lang.IllegalStateException: Failed to load ApplicationContext
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:98)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	... 72 common frames omitted
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:38,128 [main] INFO  l.j.t.i.c.r.ClassifierRepositoryTest - Starting ClassifierRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:38,128 [main] INFO  l.j.t.i.c.r.ClassifierRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:38,175 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:38,190 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:38,192 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:38,211 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:111b7840-c6d7-4349-bd23-bb572546631a;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:38,221 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:38,221 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:38,223 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:38,240 [main] INFO  l.j.t.i.c.r.ClassifierRepositoryTest - Starting ClassifierRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:38,240 [main] INFO  l.j.t.i.c.r.ClassifierRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:38,279 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:38,293 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 12 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:38,296 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:38,319 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:6359b0b2-0e42-4915-9b34-583782d3fe1c;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:38,333 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:38,333 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:38,335 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.outputConditionEvaluationReport(SpringBootDependencyInjectionTestExecutionListener.java:53)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:46)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 88 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 98 common frames omitted
2024-02-03 22:26:38,337 [main] ERROR o.s.test.context.TestContextManager - Caught exception while allowing TestExecutionListener [org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@e88e14] to prepare test instance [lv.javaguru.travel.insurance.core.repositories.ClassifierRepositoryTest@18ffc008]
java.lang.IllegalStateException: Failed to load ApplicationContext
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:98)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	... 72 common frames omitted
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:38,355 [main] INFO  l.j.t.i.c.r.ClassifierRepositoryTest - Starting ClassifierRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:38,356 [main] INFO  l.j.t.i.c.r.ClassifierRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:38,414 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:38,431 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 17 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:38,436 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:38,451 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:f9a3c11c-697a-42ed-9937-8c6bda63f206;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:38,460 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:38,460 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:38,461 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:38,476 [main] INFO  l.j.t.i.c.r.ClassifierRepositoryTest - Starting ClassifierRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:38,476 [main] INFO  l.j.t.i.c.r.ClassifierRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:38,508 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:38,519 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:38,522 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:38,538 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:3ea82e2f-5d40-4a9f-bd0f-530574dfe5f9;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:38,546 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:38,547 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:38,549 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.outputConditionEvaluationReport(SpringBootDependencyInjectionTestExecutionListener.java:53)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:46)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 88 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 98 common frames omitted
2024-02-03 22:26:38,550 [main] ERROR o.s.test.context.TestContextManager - Caught exception while allowing TestExecutionListener [org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@e88e14] to prepare test instance [lv.javaguru.travel.insurance.core.repositories.ClassifierRepositoryTest@4c25201]
java.lang.IllegalStateException: Failed to load ApplicationContext
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:98)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	... 72 common frames omitted
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:38,688 [main] INFO  o.s.b.t.a.o.j.DataJpaTestContextBootstrapper - Neither @ContextConfiguration nor @ContextHierarchy found for test class [lv.javaguru.travel.insurance.core.repositories.ClassifierValueRepositoryTest], using SpringBootContextLoader
2024-02-03 22:26:38,688 [main] INFO  o.s.t.c.s.AbstractContextLoader - Could not detect default resource locations for test class [lv.javaguru.travel.insurance.core.repositories.ClassifierValueRepositoryTest]: no resource found for suffixes {-context.xml, Context.groovy}.
2024-02-03 22:26:38,689 [main] INFO  o.s.t.c.s.AnnotationConfigContextLoaderUtils - Could not detect default configuration classes for test class [lv.javaguru.travel.insurance.core.repositories.ClassifierValueRepositoryTest]: ClassifierValueRepositoryTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2024-02-03 22:26:38,692 [main] INFO  o.s.b.t.c.SpringBootTestContextBootstrapper - Found @SpringBootConfiguration lv.javaguru.travel.insurance.InsuranceApplication for test class lv.javaguru.travel.insurance.core.repositories.ClassifierValueRepositoryTest
2024-02-03 22:26:38,692 [main] INFO  o.s.b.t.a.o.j.DataJpaTestContextBootstrapper - Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.event.ApplicationEventsTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener, org.springframework.test.context.event.EventPublishingTestExecutionListener]
2024-02-03 22:26:38,692 [main] INFO  o.s.b.t.a.o.j.DataJpaTestContextBootstrapper - Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@36c1b6ff, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@3b28ab9b, org.springframework.test.context.event.ApplicationEventsTestExecutionListener@16c1345b, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@278cbf5a, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@1c41931a, org.springframework.test.context.support.DirtiesContextTestExecutionListener@62cb977a, org.springframework.test.context.transaction.TransactionalTestExecutionListener@7db70494, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener@3f030217, org.springframework.test.context.event.EventPublishingTestExecutionListener@2fca9fae, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@1104ad6a, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@54d2887a, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@73e63b4d, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@8aafd70, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener@3c717ef2, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@7ca0b05e]
2024-02-03 22:26:38,707 [main] INFO  l.j.t.i.c.r.ClassifierValueRepositoryTest - Starting ClassifierValueRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:38,707 [main] INFO  l.j.t.i.c.r.ClassifierValueRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:38,757 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:38,768 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 10 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:38,771 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:38,786 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:b38aba70-dc40-4678-befe-18114f51c2ce;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:38,796 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:38,797 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:38,798 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:38,813 [main] INFO  l.j.t.i.c.r.ClassifierValueRepositoryTest - Starting ClassifierValueRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:38,814 [main] INFO  l.j.t.i.c.r.ClassifierValueRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:38,876 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:38,890 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 12 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:38,892 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:38,904 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:dfe84d08-3acc-4e11-bbda-def8f8143c48;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:38,912 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:38,912 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:38,915 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.outputConditionEvaluationReport(SpringBootDependencyInjectionTestExecutionListener.java:53)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:46)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 88 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 98 common frames omitted
2024-02-03 22:26:38,915 [main] ERROR o.s.test.context.TestContextManager - Caught exception while allowing TestExecutionListener [org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@1c41931a] to prepare test instance [lv.javaguru.travel.insurance.core.repositories.ClassifierValueRepositoryTest@434a72f2]
java.lang.IllegalStateException: Failed to load ApplicationContext
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:98)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	... 72 common frames omitted
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:38,931 [main] INFO  l.j.t.i.c.r.ClassifierValueRepositoryTest - Starting ClassifierValueRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:38,932 [main] INFO  l.j.t.i.c.r.ClassifierValueRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:38,980 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:38,991 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 10 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:38,994 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:39,017 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:0f02f4a6-f70c-4c28-8d0c-1e825941ddff;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:39,025 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:39,025 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:39,026 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:39,041 [main] INFO  l.j.t.i.c.r.ClassifierValueRepositoryTest - Starting ClassifierValueRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:39,041 [main] INFO  l.j.t.i.c.r.ClassifierValueRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:39,076 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:39,087 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:39,091 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:39,112 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:ae8a39cb-cd79-400b-981f-2ad12746752c;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:39,123 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:39,123 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:39,124 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.outputConditionEvaluationReport(SpringBootDependencyInjectionTestExecutionListener.java:53)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:46)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 88 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 98 common frames omitted
2024-02-03 22:26:39,125 [main] ERROR o.s.test.context.TestContextManager - Caught exception while allowing TestExecutionListener [org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@1c41931a] to prepare test instance [lv.javaguru.travel.insurance.core.repositories.ClassifierValueRepositoryTest@7d086485]
java.lang.IllegalStateException: Failed to load ApplicationContext
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:98)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	... 72 common frames omitted
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:39,146 [main] INFO  l.j.t.i.c.r.ClassifierValueRepositoryTest - Starting ClassifierValueRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:39,147 [main] INFO  l.j.t.i.c.r.ClassifierValueRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:39,186 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:39,201 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:39,204 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:39,218 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:7559932e-9b93-486a-a9a6-8515a444e5bb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:39,227 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:39,228 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:39,229 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:39,242 [main] INFO  l.j.t.i.c.r.ClassifierValueRepositoryTest - Starting ClassifierValueRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:39,243 [main] INFO  l.j.t.i.c.r.ClassifierValueRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:39,284 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:39,302 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 17 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:39,306 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:39,325 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:c49d5cee-aff6-4841-97ea-dc361dbc8b0e;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:39,335 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:39,335 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:39,337 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.outputConditionEvaluationReport(SpringBootDependencyInjectionTestExecutionListener.java:53)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:46)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 88 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 98 common frames omitted
2024-02-03 22:26:39,338 [main] ERROR o.s.test.context.TestContextManager - Caught exception while allowing TestExecutionListener [org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@1c41931a] to prepare test instance [lv.javaguru.travel.insurance.core.repositories.ClassifierValueRepositoryTest@38eafdab]
java.lang.IllegalStateException: Failed to load ApplicationContext
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:98)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	... 72 common frames omitted
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:39,354 [main] INFO  l.j.t.i.c.r.ClassifierValueRepositoryTest - Starting ClassifierValueRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:39,354 [main] INFO  l.j.t.i.c.r.ClassifierValueRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:39,411 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:39,432 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 21 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:39,437 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:39,457 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:8db9bfff-a213-453a-8d26-8edea21df0ca;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:39,468 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:39,468 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:39,470 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:39,482 [main] INFO  l.j.t.i.c.r.ClassifierValueRepositoryTest - Starting ClassifierValueRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:39,483 [main] INFO  l.j.t.i.c.r.ClassifierValueRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:39,527 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:39,545 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 18 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:39,550 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:39,565 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:038d5950-e6c7-4d26-ae1e-e8b985179daa;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:39,573 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:39,574 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:39,575 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.outputConditionEvaluationReport(SpringBootDependencyInjectionTestExecutionListener.java:53)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:46)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 88 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 98 common frames omitted
2024-02-03 22:26:39,580 [main] ERROR o.s.test.context.TestContextManager - Caught exception while allowing TestExecutionListener [org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@1c41931a] to prepare test instance [lv.javaguru.travel.insurance.core.repositories.ClassifierValueRepositoryTest@60660d21]
java.lang.IllegalStateException: Failed to load ApplicationContext
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:98)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	... 72 common frames omitted
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:39,600 [main] INFO  l.j.t.i.c.r.ClassifierValueRepositoryTest - Starting ClassifierValueRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:39,601 [main] INFO  l.j.t.i.c.r.ClassifierValueRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:39,648 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:39,658 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:39,661 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:39,674 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:9f9ad9ca-1607-4d0c-8a2d-1b7c05cab250;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:39,681 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:39,681 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:39,682 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:39,694 [main] INFO  l.j.t.i.c.r.ClassifierValueRepositoryTest - Starting ClassifierValueRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:39,694 [main] INFO  l.j.t.i.c.r.ClassifierValueRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:39,725 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:39,735 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 10 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:39,738 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:39,756 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:e741d85b-3e20-4745-b91f-77acde2bf087;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:39,766 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:39,767 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:39,769 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.outputConditionEvaluationReport(SpringBootDependencyInjectionTestExecutionListener.java:53)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:46)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 88 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 98 common frames omitted
2024-02-03 22:26:39,770 [main] ERROR o.s.test.context.TestContextManager - Caught exception while allowing TestExecutionListener [org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@1c41931a] to prepare test instance [lv.javaguru.travel.insurance.core.repositories.ClassifierValueRepositoryTest@59da4992]
java.lang.IllegalStateException: Failed to load ApplicationContext
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:98)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	... 72 common frames omitted
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:39,786 [main] INFO  l.j.t.i.c.r.ClassifierValueRepositoryTest - Starting ClassifierValueRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:39,787 [main] INFO  l.j.t.i.c.r.ClassifierValueRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:39,822 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:39,834 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 10 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:39,836 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:39,853 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:6bd77caf-ff3a-4d13-a24a-2a962c6f1f91;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:39,860 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:39,860 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:39,862 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:39,875 [main] INFO  l.j.t.i.c.r.ClassifierValueRepositoryTest - Starting ClassifierValueRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:39,875 [main] INFO  l.j.t.i.c.r.ClassifierValueRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:39,908 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:39,928 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 20 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:39,931 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:39,947 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:4041be8d-270e-44b1-a65e-631df4fee398;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:39,956 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:39,957 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:39,958 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.outputConditionEvaluationReport(SpringBootDependencyInjectionTestExecutionListener.java:53)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:46)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 88 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 98 common frames omitted
2024-02-03 22:26:39,959 [main] ERROR o.s.test.context.TestContextManager - Caught exception while allowing TestExecutionListener [org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@1c41931a] to prepare test instance [lv.javaguru.travel.insurance.core.repositories.ClassifierValueRepositoryTest@3a5244a1]
java.lang.IllegalStateException: Failed to load ApplicationContext
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:98)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	... 72 common frames omitted
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:39,976 [main] INFO  l.j.t.i.c.r.ClassifierValueRepositoryTest - Starting ClassifierValueRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:39,976 [main] INFO  l.j.t.i.c.r.ClassifierValueRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:40,005 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:40,015 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 10 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:40,018 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:40,030 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:5ac8244c-db6b-4b52-b5ee-87231537c7a1;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:40,042 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:40,047 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:40,049 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:40,074 [main] INFO  l.j.t.i.c.r.ClassifierValueRepositoryTest - Starting ClassifierValueRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:40,074 [main] INFO  l.j.t.i.c.r.ClassifierValueRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:40,105 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:40,116 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 10 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:40,118 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:40,130 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:fb59c9f3-f6a3-4faf-96bb-63b7087791a9;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:40,138 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:40,139 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:40,140 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.outputConditionEvaluationReport(SpringBootDependencyInjectionTestExecutionListener.java:53)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:46)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 88 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 98 common frames omitted
2024-02-03 22:26:40,141 [main] ERROR o.s.test.context.TestContextManager - Caught exception while allowing TestExecutionListener [org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@1c41931a] to prepare test instance [lv.javaguru.travel.insurance.core.repositories.ClassifierValueRepositoryTest@2801ccb3]
java.lang.IllegalStateException: Failed to load ApplicationContext
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:98)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	... 72 common frames omitted
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:40,156 [main] INFO  l.j.t.i.c.r.ClassifierValueRepositoryTest - Starting ClassifierValueRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:40,156 [main] INFO  l.j.t.i.c.r.ClassifierValueRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:40,190 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:40,202 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:40,204 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:40,219 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:11f46817-67df-4bbc-baa1-39cbaf2f7472;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:40,227 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:40,228 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:40,230 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:40,246 [main] INFO  l.j.t.i.c.r.ClassifierValueRepositoryTest - Starting ClassifierValueRepositoryTest using Java 18.0.2 on WIN-6V3MTR2VJA7 with PID 9600 (started by Eugene in C:\Java Projects\JavaInternship\bsu-java-internship-2023\student_kroshinsky_eugene)
2024-02-03 22:26:40,246 [main] INFO  l.j.t.i.c.r.ClassifierValueRepositoryTest - No active profile set, falling back to 1 default profile: "default"
2024-02-03 22:26:40,275 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-02-03 22:26:40,285 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 9 ms. Found 4 JPA repository interfaces.
2024-02-03 22:26:40,288 [main] INFO  o.s.b.t.a.j.TestDatabaseAutoConfiguration$EmbeddedDataSourceBeanFactoryPostProcessor - Replacing 'dataSource' DataSource bean with embedded version
2024-02-03 22:26:40,304 [main] INFO  o.s.j.d.e.EmbeddedDatabaseFactory - Starting embedded database: url='jdbc:h2:mem:be66adb6-4dfe-4d07-abe6-7bdc9deb173a;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-02-03 22:26:40,311 [main] WARN  o.s.c.a.AnnotationConfigApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
2024-02-03 22:26:40,311 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2024-02-03 22:26:40,312 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.outputConditionEvaluationReport(SpringBootDependencyInjectionTestExecutionListener.java:53)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:46)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 88 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 98 common frames omitted
2024-02-03 22:26:40,312 [main] ERROR o.s.test.context.TestContextManager - Caught exception while allowing TestExecutionListener [org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@1c41931a] to prepare test instance [lv.javaguru.travel.insurance.core.repositories.ClassifierValueRepositoryTest@65a03c19]
java.lang.IllegalStateException: Failed to load ApplicationContext
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:98)
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:124)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:118)
	at org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)
	at org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener.prepareTestInstance(SpringBootDependencyInjectionTestExecutionListener.java:43)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:248)
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:138)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$8(ClassBasedTestDescriptor.java:363)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.executeAndMaskThrowable(ClassBasedTestDescriptor.java:368)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$invokeTestInstancePostProcessors$9(ClassBasedTestDescriptor.java:363)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstancePostProcessors(ClassBasedTestDescriptor.java:362)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$instantiateAndPostProcessTestInstance$6(ClassBasedTestDescriptor.java:283)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:282)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$4(ClassBasedTestDescriptor.java:272)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$5(ClassBasedTestDescriptor.java:271)
	at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:31)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:102)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:101)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:66)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$2(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:123)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
	at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:107)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)
	at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:114)
	at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:86)
	at org.junit.platform.launcher.core.DefaultLauncherSession$DelegatingLauncher.execute(DefaultLauncherSession.java:86)
	at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:53)
	at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:57)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)
	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSourceScriptDatabaseInitializer' defined in class path resource [org/springframework/boot/autoconfigure/sql/init/DataSourceInitializationConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1804)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1154)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:908)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:734)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:308)
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:132)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:141)
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:90)
	... 72 common frames omitted
Caused by: org.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement #16 of URL [file:/C:/Java%20Projects/JavaInternship/bsu-java-internship-2023/student_kroshinsky_eugene/out/test/resources/data.sql]: INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000'); nested exception is org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:282)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyDataScripts(AbstractScriptDatabaseInitializer.java:101)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:76)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	... 89 common frames omitted
Caused by: org.h2.jdbc.JdbcSQLSyntaxErrorException: Синтаксическая ошибка в выражении SQL "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; ожидалось "identifier"
Syntax error in SQL statement "INSERT INTO CLASSIFIER_VALUES (CLASSIFIER_ID, IC, DESCRIPTION) VALUES ((SELECT ID FROM 'classifiers'[*] WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT ID FROM 'classifiers' WHERE TITLE = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000')"; expected "identifier"; SQL statement:
INSERT INTO classifier_values (classifier_id, ic, description) VALUES ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_10000', 'Limit is 10000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_15000', 'Limit is 15000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_20000', 'Limit is 20000'), ((SELECT id FROM 'classifiers' WHERE title = 'MEDICAL_RISK_LIMIT_LEVEL'), 'LEVEL_50000', 'Limit is 50000') [42001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.getSyntaxError(DbException.java:243)
	at org.h2.command.Parser.readColumnIdentifier(Parser.java:4976)
	at org.h2.command.Parser.readTableFilter(Parser.java:1921)
	at org.h2.command.Parser.parseSelectFromPart(Parser.java:2827)
	at org.h2.command.Parser.parseSelect(Parser.java:2959)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseQuery(Parser.java:2620)
	at org.h2.command.Parser.readTerm(Parser.java:4287)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1877)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	... 99 common frames omitted
2024-02-03 22:26:40,341 [main] INFO  o.s.b.t.c.SpringBootTestContextBootstrapper - Neither @ContextConfiguration nor @ContextHierarchy found for test class [lv.javaguru.travel.insurance.rest.TravelCalculatePremiumControllerTest], using SpringBootContextLoader
2024-02-03 22:26:40,342 [main] INFO  o.s.t.c.s.AbstractContextLoader - Could not detect default resource locations for test class [lv.javaguru.travel.insurance.rest.TravelCalculatePremiumControllerTest]: no resource found for suffixes {-context.xml, Context.groovy}.
2024-02-03 22:26:40,342 [main] INFO  o.s.t.c.s.AnnotationConfigContextLoaderUtils - Could not detect default configuration classes for test class [lv.javaguru.travel.insurance.rest.TravelCalculatePremiumControllerTest]: TravelCalculatePremiumControllerTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2024-02-03 22:26:40,350 [main] INFO  o.s.b.t.c.SpringBootTestContextBootstrapper - Found @SpringBootConfiguration lv.javaguru.travel.insurance.InsuranceApplication for test class lv.javaguru.travel.insurance.rest.TravelCalculatePremiumControllerTest
2024-02-03 22:26:40,354 [main] INFO  o.s.b.t.c.SpringBootTestContextBootstrapper - Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.event.ApplicationEventsTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener, org.springframework.test.context.event.EventPublishingTestExecutionListener]
